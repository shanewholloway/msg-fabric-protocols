export default function json_protocol(shared) ::
  const {stateFor, createMultipart, createStream, json_pack} = shared
  const {pack_utf8, unpack_utf8} = shared.packetParser

  return @{}
    packBody

    get datagram() :: return this.direct
    direct: @{}
      t_recv(pkt, sink) ::
        const msg = sink.json_unpack @ pkt.body_utf8() || undefined
        return sink.recvMsg @ msg, pkt.info

    multipart: @{}
      t_recv(pkt, sink) ::
        const state = stateFor @ pkt, sink, createMultipart
        const body_buf = state.feed(pkt)
        if undefined !== body_buf ::
          const msg = sink.json_unpack @ unpack_utf8(body_buf) || undefined
          return sink.recvMsg @ msg, state.info

    streaming: @{}
      mode: 'object'
      t_recv(pkt, sink) ::
        const state = stateFor @ pkt, sink, createStream
        return state.feed(pkt, unpackBody)

  function packBody(body) ::
    return pack_utf8 @ json_pack(body)

  function unpackBody(pkt, sink) ::
    return sink.json_unpack @ pkt.body_utf8()
